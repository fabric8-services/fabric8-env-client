// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "env": environment Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-env/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-env-client
// --pkg=env
// --version=v1.3.0

package env

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateEnvironmentPayload is the environment create action payload.
type CreateEnvironmentPayload struct {
	Data *Environment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// CreateEnvironmentPath computes a request path to the create action of environment.
func CreateEnvironmentPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/environments", param0)
}

// Create environment
func (c *Client) CreateEnvironment(ctx context.Context, path string, payload *CreateEnvironmentPayload) (*http.Response, error) {
	req, err := c.NewCreateEnvironmentRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateEnvironmentRequest create the request corresponding to the create action endpoint of the environment resource.
func (c *Client) NewCreateEnvironmentRequest(ctx context.Context, path string, payload *CreateEnvironmentPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListEnvironmentPath computes a request path to the list action of environment.
func ListEnvironmentPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/environments", param0)
}

// List environments for the given space ID.
func (c *Client) ListEnvironment(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListEnvironmentRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEnvironmentRequest create the request corresponding to the list action endpoint of the environment resource.
func (c *Client) NewListEnvironmentRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowEnvironmentPath computes a request path to the show action of environment.
func ShowEnvironmentPath(envID uuid.UUID) string {
	param0 := envID.String()

	return fmt.Sprintf("/api/environments/%s", param0)
}

// Retrieve environment (as JSONAPI) for the given ID.
func (c *Client) ShowEnvironment(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowEnvironmentRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEnvironmentRequest create the request corresponding to the show action endpoint of the environment resource.
func (c *Client) NewShowEnvironmentRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
